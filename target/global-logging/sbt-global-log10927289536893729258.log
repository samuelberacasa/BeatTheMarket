[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SAMUEL~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SAMUEL~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.1 (Oracle Corporation Java 13.0.1)
[debug]       Load.loadUnit: plugins took 250.401ms
[debug]       Load.loadUnit: defsScala took 0.3935ms
[debug] [Loading] Scanning directory C:\Users\Samuel Beracasa\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Samuel Beracasa\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.7822 ms
[debug]           Load.resolveProject(global-plugins) took 43.4625ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Samuel Beracasa\.sbt\1.0\plugins, plugins: List(<none>))) took 89.0226ms
[debug] [Loading] Done in C:\Users\Samuel Beracasa\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 122.04ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3142ms
[debug]     Load.loadUnit(file:/C:/Users/Samuel%20Beracasa/.sbt/1.0/plugins/, ...) took 389.006ms
[debug]   Load.apply: load took 629.4184ms
[debug]   Load.apply: resolveProjects took 8.5664ms
[debug]   Load.apply: finalTransforms took 93.2682ms
[debug]   Load.apply: config.delegates took 14.8664ms
[debug]   Load.apply: Def.make(settings)... took 1716.5962ms
[debug]   Load.apply: structureIndex took 150.2605ms
[debug]   Load.apply: mkStreams took 2.3716ms
[info] loading global plugins from C:\Users\Samuel Beracasa\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4783.1386ms
[debug]           Load.loadUnit: plugins took 36.4609ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket\project
[debug]             Load.loadUnit: mkEval took 8.3972ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.1595 ms
[info] loading settings for project beatthemarket-build from idea.sbt ...
[debug]               Load.resolveProject(beatthemarket-build) took 4.3582ms
[debug]             Load.loadTransitive: finalizeProject(Project(id beatthemarket-build, base: C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket\project, plugins: List(<none>))) took 9.5424ms
[debug] [Loading] Done in C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket\project, returning: (beatthemarket-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3264.0023ms
[debug]           Load.loadUnit: cleanEvalClasses took 13.2679ms
[debug]         Load.loadUnit(file:/C:/Users/Samuel%20Beracasa/Documents/_Workspace/Scala/BeatTheMarket/project/, ...) took 3314.9959ms
[debug]       Load.apply: load took 3317.8682ms
[debug]       Load.apply: resolveProjects took 0.174ms
[debug]       Load.apply: finalTransforms took 19.193ms
[debug]       Load.apply: config.delegates took 0.4306ms
[debug]       Load.apply: Def.make(settings)... took 269.7267ms
[debug]       Load.apply: structureIndex took 54.8711ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7641.4275ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket
[debug]       Load.loadUnit: mkEval took 0.3184ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.7227 ms
[info] loading settings for project beatthemarket from build.sbt ...
[debug]         Load.resolveProject(beatthemarket) took 40.8624ms
[debug]       Load.loadTransitive: finalizeProject(Project(id beatthemarket, base: C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket, plugins: List(<none>))) took 47.4265ms
[debug] [Loading] Done in C:\Users\Samuel Beracasa\Documents\_Workspace\Scala\BeatTheMarket, returning: (beatthemarket)
[debug]     Load.loadUnit: loadedProjectsRaw took 2225.5052ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.1371ms
[debug]   Load.loadUnit(file:/C:/Users/Samuel%20Beracasa/Documents/_Workspace/Scala/BeatTheMarket/, ...) took 9902.0285ms
[debug] Load.apply: load took 9903.8586ms
[debug] Load.apply: resolveProjects took 0.1445ms
[debug] Load.apply: finalTransforms took 33.0612ms
[debug] Load.apply: config.delegates took 0.3909ms
[debug] Load.apply: Def.make(settings)... took 116.8826ms
[debug] Load.apply: structureIndex took 43.5495ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to BeatTheMarket (in build file:/C:/Users/Samuel%20Beracasa/Documents/_Workspace/Scala/BeatTheMarket/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58063 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58063, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to BeatTheMarket (in build file:/C:/Users/Samuel%20Beracasa/Documents/_Workspace/Scala/BeatTheMarket/)
[debug] > Exec(idea-shell, None, None)
